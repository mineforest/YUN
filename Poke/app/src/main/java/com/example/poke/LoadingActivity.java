package com.example.poke;

import android.app.Activity;
import android.content.Intent;
import android.os.AsyncTask;
import android.os.Bundle;
import android.util.Log;
import android.widget.TextView;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;

import com.github.jorgecastillo.FillableLoader;
import com.github.jorgecastillo.FillableLoaderBuilder;
import com.github.jorgecastillo.State;
import com.github.jorgecastillo.listener.OnStateChangeListener;
import com.google.android.gms.tasks.OnCompleteListener;
import com.google.android.gms.tasks.Task;
import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.auth.FirebaseUser;
import com.google.firebase.database.DataSnapshot;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.FirebaseDatabase;

public class LoadingActivity extends Activity {
    private FirebaseAuth mAuth;
    private DatabaseReference mDatabase;
    private String uid;
    FirebaseUser user;
    private TextView tv;
    @Override
    protected void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.loading_tmp);

        tv = findViewById(R.id.info_txt);
        FillableLoader fillableLoader;
        fillableLoader = findViewById(R.id.fillableLogo);
        fillableLoader.setSvgPath("M705,169.21C705,169.21 752,169.21 752,169.21 761.31,169.11 779.58,171.63 789,173.39 836.28,182.24 876.74,201.38 909.91,237 957.55,288.15 969.79,353.55 969,421 969,421 968.09,431 968.09,431 963.87,492.73 945.47,548.62 899,591.91 863.67,624.82 819.36,641.49 772,647.15 772,647.15 750,649 750,649 750,649 711,649 711,649 700.45,648.87 683.59,646.34 673,644.42 616.41,634.2 569.07,606.52 535.72,559 514.74,529.11 502.91,493.92 497.73,458 497.73,458 495,432 495,432 495,432 494,413 494,413 494,413 494,403 494,403 494,403 495,386 495,386 495,386 495.91,376 495.91,376 498.97,334.21 512.22,292.54 536.2,258 565.42,215.92 607.05,190.05 656,177.15 668.72,173.8 681.96,171.84 695,170.28 695,170.28 705,169.21 705,169.21ZM58,179C58,179 236,179 236,179 236,179 275,179 275,179 275,179 287,179.91 287,179.91 321.89,182.35 358.49,191.26 387,212.48 403.37,224.66 415.76,238.58 424.74,257 437.58,283.33 438.33,307.52 438,336 437.7,361.5 425.65,395.98 411.48,417 396.65,439.01 373.1,456.51 350,469.14 328.74,480.75 293.24,488.96 269,489 269,489 242,489 242,489 242,489 178,489 178,489 178,489 178,639 178,639 178,639 58,639 58,639 58,639 58,179 58,179ZM1058,179C1058,179 1178,179 1178,179 1178,179 1178,319 1178,319 1178,319 1178,362 1178,362 1178,362 1179,385 1179,385 1182.26,378.82 1191.33,367.84 1196,362 1196,362 1222,329 1222,329 1222,329 1302.35,227 1302.35,227 1302.35,227 1328.35,194 1328.35,194 1331.34,190.14 1337.66,181.22 1342,179.6 1343.92,178.89 1346.93,179 1349,179 1349,179 1479,179 1479,179 1475.45,185.08 1466.21,195.21 1461.27,201 1461.27,201 1434.27,233 1434.27,233 1434.27,233 1347.41,336 1347.41,336 1347.41,336 1313.73,376 1313.73,376 1311.21,378.96 1302.02,388.62 1301.92,392 1301.81,395.52 1311.61,406.71 1314.12,410 1314.12,410 1349.13,456 1349.13,456 1349.13,456 1440.65,576 1440.65,576 1440.65,576 1469.65,614 1469.65,614 1474.84,620.74 1484.01,632.05 1488,639 1488,639 1350,639 1350,639 1337.94,638.98 1337.76,634.51 1330.63,625 1330.63,625 1307.42,594 1307.42,594 1307.42,594 1241.87,506 1241.87,506 1241.87,506 1204,456 1204,456 1204,456 1187.08,478 1187.08,478 1187.08,478 1178.85,489 1178.85,489 1178.85,489 1178,497 1178,497 1178,497 1178,639 1178,639 1178,639 1058,639 1058,639 1058,639 1058,179 1058,179ZM1545,179C1545,179 1878,179 1878,179 1878,179 1878,268 1878,268 1878,268 1664,268 1664,268 1664,268 1664,347 1664,347 1664,347 1863,347 1863,347 1863,347 1863,436 1863,436 1863,436 1664,436 1664,436 1664,436 1664,550 1664,550 1664,550 1878,550 1878,550 1878,550 1878,639 1878,639 1878,639 1545,639 1545,639 1545,639 1545,179 1545,179ZM717,257.14C705.46,259.05 693.48,262.03 683,267.27 643.99,286.77 626.55,330.07 620.87,371 620.87,371 619,392 619,392 619,392 618.01,410 618.01,410 618.01,410 619,424 619,424 619,424 619,429 619,429 619.17,442.81 623.37,465.81 627.67,479 639.46,515.17 659.55,543.63 697,556 704.5,558.48 715.13,560.9 723,561 723,561 738,561 738,561 758.15,560.97 780.2,552.86 796,540.49 837.24,508.2 845.57,449.99 845,401 845,401 844,391 844,391 844,391 844,383 844,383 843.28,373.73 841.72,364.1 839.79,355 830.78,312.42 806.61,272.11 762,260.63 753.51,258.44 746.85,257.01 738,257.14 738,257.14 717,257.14 717,257.14ZM178,402C178,402 205,402 205,402 205,402 222,401 222,401 244.38,400.97 269.76,399.71 289,386.9 313.65,370.49 321.87,329.07 309.68,303 304.92,292.83 295.75,283.37 286,277.87 281.81,275.51 278.49,274.49 274,273 252.06,265.75 239.33,267 217,267 217,267 178,266 178,266 178,266 178,402 178,402Z");
        //fillableLoader.setSvgPath("M141,382C141,382 304,382 304,382 347.28,382 385.02,379.55 427,393.67 466.98,407.11 499.58,433.09 513.33,474 516.15,482.37 518.81,491.12 519,500 522.73,496.26 525.16,490.6 527.86,486 531.71,479.46 536.02,473.01 540.65,467 558.11,444.34 577.19,427.62 602,413.43 631.32,396.65 667.46,387.36 701,384.91 701,384.91 713,384 713,384 713,384 752,384 752,384 752,384 762,384.91 762,384.91 799.93,387.68 840.02,399.1 872,420.08 894.43,434.79 913.84,453.85 928.97,476 928.97,476 944,502 944,502 944,502 944,390 944,390 944,390 1064,390 1064,390 1064,390 1064,530 1064,530 1064,530 1064,573 1064,573 1064,573 1065,596 1065,596 1065,596 1080.4,575 1080.4,575 1080.4,575 1106.4,542 1106.4,542 1106.4,542 1189.12,437 1189.12,437 1189.12,437 1215.12,404 1215.12,404 1215.12,404 1227.17,390.6 1227.17,390.6 1227.17,390.6 1234,390 1234,390 1234,390 1672,390 1672,390 1672,390 1672,479 1672,479 1672,479 1458,479 1458,479 1458,479 1458,558 1458,558 1458,558 1657,558 1657,558 1657,558 1657,647 1657,647 1657,647 1458,647 1458,647 1458,647 1458,761 1458,761 1458,761 1672,761 1672,761 1672,761 1672,850 1672,850 1672,850 1235,850 1235,850 1224.34,849.98 1224.31,846.25 1217.37,837 1217.37,837 1193.42,805 1193.42,805 1193.42,805 1127.87,717 1127.87,717 1127.87,717 1090,667 1090,667 1090,667 1064.85,700 1064.85,700 1064.85,700 1064,708 1064,708 1064,708 1064,850 1064,850 1064,850 944,850 944,850 944,850 944,781 944,781 944,781 943,746 943,746 940.56,754.56 934.83,762.55 930.05,770 914.03,794.96 891.4,816.36 866,831.6 834.72,850.37 798.25,860.44 762,863.09 762,863.09 750,864 750,864 750,864 711,864 711,864 701.69,863.89 683.42,861.37 674,859.61 630.46,851.46 594.69,835.38 562,804.91 528.12,773.33 506.71,727.29 499.08,682 497.29,671.35 495.02,655.6 495,645 495,645 493,621 493,621 485.98,634.63 464.87,652.08 452,660.67 438.63,669.58 424.34,677.29 409,682.26 393.52,687.26 368.19,691.97 352,692 352,692 261,692 261,692 261,692 261,842 261,842 261,842 141,842 141,842 141,842 141,382 141,382ZM1339,422C1333.41,426.61 1328.48,433.43 1323.73,439 1323.73,439 1299.25,468 1299.25,468 1299.25,468 1225,556 1225,556 1225,556 1197.13,589 1197.13,589 1194.83,591.68 1187.21,599.81 1187.14,603 1187.08,606.13 1194.81,615.21 1197,618 1197,618 1225.21,655 1225.21,655 1225.21,655 1302.35,756 1302.35,756 1302.35,756 1325.13,786 1325.13,786 1328.57,790.55 1335.09,799.5 1339,803 1339,803 1339,422 1339,422ZM261,605C261,605 287,605 287,605 287,605 304,604 304,604 326.6,603.96 351.42,602.98 371,590.3 390.46,577.7 397.9,555.26 398,533 398.1,510.83 388.81,492.04 369,480.87 364.81,478.51 361.49,477.49 357,476 335.06,468.75 322.33,470 300,470 300,470 261,469 261,469 261,469 261,605 261,605ZM718,472.14C705.73,474.09 694.19,476.77 683,482.37 636.48,505.63 619.56,563.58 619,612 619,612 618.04,626 618.04,626 618.04,626 619,638 619,638 619,638 619,644 619,644 619.17,657.88 622.76,676.61 626.58,690 637.31,727.59 658.57,758.3 697,771 704.5,773.48 715.13,775.9 723,776 723,776 738,776 738,776 758.07,775.97 780.3,767.7 796,755.33 837.27,722.82 845.57,665.14 845,616 845,616 844.09,606 844.09,606 843.23,593.43 842.31,581.39 839.58,569 830.29,526.9 806.19,487 762,475.63 753.51,473.44 746.85,472.01 738,472.14 738,472.14 718,472.14 718,472.14Z");
        fillableLoader.reset();
        fillableLoader.start();
        fillableLoader.setOnStateChangeListener(new OnStateChangeListener() {
            @Override
            public void onStateChange(int state) {
                if(state==State.FINISHED){
                    CallAsyncTask();
                }
            }
        });
    }

    private void CallAsyncTask(){
        LoadingActivity.MyAsyncTask myAsyncTask = new LoadingActivity.MyAsyncTask();
        runOnUiThread(() -> tv.setText("loading..."));
        myAsyncTask.execute();
    }

    private class MyAsyncTask extends AsyncTask<Void, Void, Integer>{

        @Override
        protected void onPreExecute() {
            try{
                //Thread.sleep(500);
            }catch (Exception e){
                e.printStackTrace();
            }

            super.onPreExecute();
        }

        @Override
        protected void onProgressUpdate(Void... values) {
            super.onProgressUpdate(values);
        }

        @Override
        protected Integer doInBackground(Void... voids) {
            try{
                runOnUiThread(() -> tv.setText("connecting DB..."));
                mAuth = FirebaseAuth.getInstance();
                user = mAuth.getCurrentUser();
                mDatabase = FirebaseDatabase.getInstance().getReference();
                if(user == null) {
                    myStartActivity(LoginActivity.class);
                }
                else{
                    uid = user.getUid();
                    nullStartActivity(uid);
                }
                Thread.sleep(500);
            }catch (Exception e){
                e.printStackTrace();
            }

            return 0;
        }

        @Override
        protected void onPostExecute(Integer integer) {
            super.onPostExecute(integer);
        }

        @Override
        protected void onCancelled() {
            super.onCancelled();

        }
    }

    private void nullStartActivity(String uid){
        runOnUiThread(() -> tv.setText("checking the integrity..."));
        mDatabase.get().addOnCompleteListener(task -> {
            if (task.isSuccessful()) {
                DataSnapshot dataSnapshot = task.getResult();
                runOnUiThread(() -> tv.setText("verifying yout info..."));
                if(!dataSnapshot.child("users").child(uid).exists()){
                    myStartActivity(MemberInitActivity.class);
                }
                else if(!dataSnapshot.child("preference").child(uid).exists()){
                    myStartActivity(PreferenceActivity.class);
                }
                else{
                    myStartActivity(MainActivity.class);
                }
            }
            else {
                Log.e("firebase", "Error getting data", task.getException());
            }
        });
    }

    private void myStartActivity(Class c){
        runOnUiThread(() -> tv.setText("now starting..."));
        Intent intent = new Intent(getApplicationContext(),c);
        intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
        startActivity(intent);
        finish();
    }
}
